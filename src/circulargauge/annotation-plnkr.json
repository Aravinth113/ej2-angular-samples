{"annotation.service":"/**\n * Annotation source\n */\n\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport class AnnotationDataSerive {\n    GetSubGauge1(): any {\n        let gauge1: CircularGauge = new CircularGauge({\n             axes: [{\n                ranges: [{ start: 0, end: 3, startWidth: 4, endWidth: 4, color: 'rgba(29,29,29,0.4)' },\n                { start: 3, end: 12, startWidth: 4, endWidth: 4, color: 'rgba(168,145,102,0.1)' }],\n                annotations: [{ angle: 270, radius: '40%', content: null },\n                { angle: 180, radius: '40%', content: null },\n                { angle: 90, radius: '40%', content: null },\n                { angle: 360, radius: '35%', zIndex: '1', content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>' }],\n                labelStyle: { hiddenLabel: 'First', font: { color: '#8c8c8c', size: '0px' }, autoAngle: false },\n                majorTicks: { width: 1, height: 5, interval: 1 },\n                minorTicks: { height: 3, width: 0.5, interval: 0.2 }, minimum: 0, maximum: 12,\n                pointers: [{\n                    radius: '70%', pointerWidth: 2, color: 'rgba(29,29,29,1)',\n                    cap: {\n                        color: 'rgba(29,29,29,1)', radius: 2, border: { width: 0.2, color: 'rgba(168,145,102,1)' }\n                    }, needleTail: { color: 'rgba(168,145,102,1)', length: '10%' }, animation: { enable: false, duration: 500 }\n                }], startAngle: 0, endAngle: 0, lineStyle: { width: 0 }\n            }]\n        });\n        let gauge2: CircularGauge = new CircularGauge({\n            titleStyle: { color: 'black' },\n            axes: [\n                {\n                    startAngle: 0, endAngle: 0,\n                    lineStyle: { width: 0 },\n                    ranges: [\n                        {\n                            start: 0, end: 3,\n                            startWidth: 4, endWidth: 4,\n                            color: 'rgba(29,29,29,0.4)'\n                        }, {\n                            start: 3, end: 12,\n                            startWidth: 4, endWidth: 4,\n                            color: 'rgba(168,145,102,0.1)'\n                        }\n                    ],\n                    annotations: [{\n                        angle: 270,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 180,\n                        radius: '40%',\n                        content: null\n                    }, {\n                        angle: 90,\n                        radius: '50%',\n                        content: null\n                    }, {\n                        angle: 360,\n                        radius: '35%',zIndex: '1',\n                        content: '<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'\n                    }],\n                    labelStyle: {\n                        hiddenLabel: 'First',\n                        font: {\n                            color: '#8c8c8c',\n                            size: '0px'\n                        },\n                        autoAngle: false\n                    }, majorTicks: {\n                        width: 1,\n                        height: 5,\n                        interval: 1\n                    }, minorTicks: {\n                        height: 3,\n                        width: 0.5,\n                        interval: 0.2\n                    },\n                    minimum: 0,\n                    maximum: 12,\n                    pointers: [{\n                        radius: '70%',\n                        pointerWidth: 2,\n                        color: 'rgba(29,29,29,1)',\n                        cap: {\n                            color: 'rgba(29,29,29,1)',\n                            radius: 2,\n                            border: {\n                                width: 0.2,\n                                color: 'rgba(168,145,102,1)'\n                            }\n                        },\n                        needleTail: {\n                            color: 'rgba(168,145,102,1)',\n                            length: '10%'\n                        }, animation: {\n                            enable: false,\n                            duration: 500\n                        }\n                    }]\n                }\n            ]\n        });\n        return { 'gauge1': gauge1, 'gauge2': gauge2 };\n    }\n}","app.module":"import { AnnotationComponent } from './annotation.component';\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\n/**\n * Circulargauge Control\n */\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-ng-circulargauge';\nimport { GridModule } from '@syncfusion/ej2-ng-grids';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@NgModule({\n    imports: [CircularGaugeAllModule, GridModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [AnnotationComponent],\nbootstrap: [AnnotationComponent]\n})\nexport class AppModule { }","annotation.component":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent, CircularGauge, Pointer } from '@syncfusion/ej2-ng-circulargauge';\nimport { IAnnotationRenderEventArgs, ILoadedEventArgs, IResizeEventArgs } from '@syncfusion/ej2-circulargauge';\nimport { AnnotationDataSerive } from './annotation.service';\n/**\n * Annotation\n */\n@Component({\n    selector: 'control-content',\n    templateUrl: 'annotation.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class AnnotationComponent {\n\n    @ViewChild('gauge1')\n    public circularGauge: CircularGaugeComponent;\n    public tooltipInterval: number;\n\n    public clockInterval: number;\n    public labelStyle: Object = {\n        hiddenLabel: 'First',\n        font: { color: 'rgb(29,29,29)' },\n        autoAngle: false\n    };\n    public pointerWidth: number = 5;\n    public angle1: number = 270;\n    public angle2: number = 180;\n    public angle3: number = 90;\n    public angle4: number = 360;\n    public startAngle: number = 0;\n    public endAngle: number = 0;\n    public minimum: number = 0;\n    public maximum: number = 12;\n    public start: number = 0;\n    public end: number = 3;\n    public width: number = 10;\n    public majorTicks: Object = {\n        width: 2, height: 14, interval: 1,\n        color: 'rgb(29,29,29)'\n    };\n    public minorTicks: Object = {\n        height: 4, width: 1, interval: 0.2,\n        color: 'rgb(29,29,29)'\n    };\n    public border: Object = { width: 0, color: 'rgba(29,29,29,0.8)' };\n    public cap: Object = {\n        radius: 0,\n        border: { width: 0, color: 'red' }\n    };\n    public needleTail: Object = {\n        length: '0%'\n    };\n    public animation: Object = {\n        enable: false\n    };\n    public lineStyle: Object = { width: 0 };\n    public cap1: Object = {\n        color: 'white',\n        radius: 4,\n        border: {\n            width: 2,\n            color: 'rgba(29,29,29,0.8)'\n        }\n    };\n    public border1: Object = {\n        width: 2,\n        color: 'rgba(29,29,29,0.8)'\n    };\n    public needleTail1: Object = {\n        color: 'rgba(29,29,29,0.8)',\n        length: '20%',\n        border: {\n            width: 2,\n            color: 'rgba(29,29,29,0.8)'\n        }\n    };\n    public animation1: Object = {\n        enable: false,\n        duration: 500\n    };\n    public resize(args: IResizeEventArgs): void {\n        location.reload();\n    }\n    public loaded(args: ILoadedEventArgs): void {\n        let intervalExecute: boolean = true;\n        let subGauge1: CircularGauge = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge1);\n        subGauge1.appendTo('#minutes');\n        let subGauge2: CircularGauge = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge2);\n        subGauge2.appendTo('#seconds');\n\n        if (intervalExecute) {\n            updateTime(false, this.circularGauge);\n            this.clockInterval = setInterval(\n                (): void => {\n                    updateTime(true, this.circularGauge, this.clockInterval);\n                },\n                1000\n            );\n            intervalExecute = false;\n        }\n        function updateSubGauge1(): void {\n            subGauge1 = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge1);\n            subGauge1.appendTo('#minutes');\n        }\n        function updateSubGauge2(): void {\n            subGauge2 = new CircularGauge(AnnotationDataSerive.prototype.GetSubGauge1().gauge2);\n            subGauge2.appendTo('#seconds');\n        }\n        function updateTime(enable: boolean, indianTime: CircularGauge, interval?: number): void {\n            if (document.getElementById('clock-container') && document.getElementsByClassName('e-circulargauge')) {\n                getTime('+5.5', indianTime, enable);\n                if (document.getElementById('minutes').childElementCount) {\n                    getTime('+5.5', subGauge1, enable, true);\n                } else {\n                    updateSubGauge1();\n                    getTime('+5.5', subGauge1, enable, true);\n                }\n                if (document.getElementById('seconds').childElementCount) {\n                    getTime('+5.5', subGauge2, enable, true);\n                } else {\n                    updateSubGauge2();\n                    getTime('+5.5', subGauge2, enable, true);\n                }\n            } else {\n                clearInterval(interval);\n            }\n        }\n        function calcTime(offset: string): Date {\n            let date: Date = new Date();\n            let localTime: number = date.getTime();\n            let localOffset: number = date.getTimezoneOffset() * 60000;\n            let utc: number = localTime + localOffset;\n            let curretDate: Date = new Date(utc + (3600000 * (+offset)));\n            return curretDate;\n        }\n        function getTime(offset: string, gauge: CircularGauge, enable: boolean, subGauge?: boolean): void {\n            let returnTime: Date = calcTime(offset);\n            let seconds: number = returnTime.getSeconds() * 12 / 60; seconds = seconds === 0 ? 12 : seconds;\n            if (!subGauge) {\n                gauge.axes[0].pointers[2].animation.enable = enable;\n                (<Pointer>gauge.axes[0].pointers[2]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[2]).currentValue;\n            } else {\n                (<Pointer>gauge.axes[0].pointers[0]).currentValue = seconds === 0.2 ? 0 : (<Pointer>gauge.axes[0].pointers[0]).currentValue;\n                gauge.axes[0].pointers[0].animation.enable = (gauge.element.id === 'seconds' && enable);\n            }\n            let hour: number = (returnTime.getHours() + returnTime.getMinutes() / 60) % 12;\n            let minutes: number = returnTime.getMinutes() * 12 / 60 + returnTime.getSeconds() * 12 / 3600;\n            let content: string;\n            let hourValue: number;\n            if (subGauge) {\n                if (gauge.element.id === 'minutes') {\n                    content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getMinutes()) + ' M</div>';\n                    gauge.setPointerValue(0, 0, minutes); gauge.setAnnotationValue(0, 3, content);\n                } else {\n                    gauge.setPointerValue(0, 0, seconds);\n                    content = '<div id=\"tm\" style=\"font-size:8px;\">' + Math.floor(returnTime.getSeconds()) + ' S</div>';\n                    gauge.setAnnotationValue(0, 3, content);\n                }\n            } else {\n                hourValue = (Math.floor(returnTime.getHours()) % 12);\n                gauge.setPointerValue(0, 0, hour); gauge.setPointerValue(0, 1, minutes); gauge.setPointerValue(0, 2, seconds);\n                content = '<div id=\"hr\" style=\"background-color:rgba(226,226,226,0.4);color:rgba(29,29,29,0.9);font-size:12px;padding:4px;\">' +\n                    (hourValue === 0 ? 12 : hourValue) + ':' + Math.floor(returnTime.getMinutes()) +\n                    (returnTime.getHours() >= 12 ? ' PM' : ' AM') + '</div>';\n                gauge.setAnnotationValue(0, 2, content); let date: Date = new Date();\n                content = '<div id=\"tm\" style=\"font-size:10px;\">' + date.getDate() + '-' +\n                    (date.getMonth() + 1) + '-' + date.getFullYear() + '</div>';\n                gauge.setAnnotationValue(0, 3, content);\n            }\n        }\n    }\n    ;\n}","annotation.html":"<div class=\"control-section\">\n    <ej-circulargauge id=\"clock-container\" #gauge1 style='display:block;' centerX='45%' (loaded)='loaded($event)' (resized)='resize($event)'>\n        <e-axes>\n            <e-axis radius='75%' startAngle=0 endAngle=0 minimum=0 maximum=12 [majorTicks]='majorTicks' [minorTicks]='minorTicks' [lineStyle]='lineStyle'\n                [labelStyle]='labelStyle'>\n                <e-ranges>\n                    <e-range start=0 end=3 color='rgba(29,29,29,0.6)'>\n                    </e-range>\n                    <e-range start=3 end=12 color='rgba(226,226,226,0.6)'>\n                    </e-range>\n                </e-ranges>\n                <e-annotations>\n                    <e-annotation angle=270 radius='50%' zIndex='1' content='<div id=\"minutes\" style=\"width:75px;height:75px;\"></div>'>\n                    </e-annotation>\n                    <e-annotation angle=180 radius='50%' zIndex='1' content='<div id=\"seconds\" style=\"width:75px;height:75px;\"></div>'>\n                    </e-annotation>\n                    <e-annotation angle=90 radius='40%' zIndex='1' content='<div id=\"hr\" style=\"background-color:rgba(29,29,29,0.6); color:white;font-size:12px;\">11:11 AM</div>'>\n                    </e-annotation>\n                    <e-annotation angle=360 radius='50%' zIndex='1' content='<div id=\"tm\" style=\"font-size:10px;\">21-06-17</div>'>\n                    </e-annotation>\n                </e-annotations>\n                <e-pointers>\n                    <e-pointer radius='40%' pointerWidth=5 color='rgba(29,29,29,0.8)' [border]='border' [animation]='animation' [cap]='cap' [needleTail]='needleTail'>\n                    </e-pointer>\n                    <e-pointer radius='60%' pointerWidth=5 color='rgba(29,29,29,0.8)' [border]='border' [animation]='animation' [cap]='cap' [needleTail]='needleTail'>\n                    </e-pointer>\n                    <e-pointer radius='70%' pointerWidth=1 color='rgba(29,29,29,0.8)' [animation]='animation1' [cap]='cap1' [border]=\"border1\" [needleTail]='needleTail1'>\n                    </e-pointer>\n                </e-pointers>\n            </e-axis>\n        </e-axes>\n    </ej-circulargauge>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","index.html":"<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n\n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}