{"customization.service":"/**\n * Dynamic source\n */\n\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { Annotations, IAxisLabelRenderEventArgs } from '@syncfusion/ej2-circulargauge';\nCircularGauge.Inject(Annotations);\n\nexport class DynamicDataSerive {\n    GetSubGauge1(): any {\n        let gauge1: CircularGauge = new CircularGauge({\n            axes: [{\n                annotations: [{\n                    content: '<div style=\"color:#666666;font-size:35px;\">50.5GB</div>',\n                    angle: 180, radius: '0%'\n                }, {\n                    content: '<div style=\"color:#757575;font-size:15px;\">Used</div>',\n                    angle: 180, radius: '25%',\n                    textStyle: {\n                        fontFamily: 'Roboto',\n                        color: '#9E9E9E',\n                        fontStyle: 'Bold',\n                        fontWeight: 'Regular',\n                        size: '14px'\n                    }\n                }],\n                lineStyle: { width: 0 },\n                startAngle: 180, endAngle: 180,\n                radius: '80%',\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: { width: 0 },\n                minorTicks: { height: 0 },\n                minimum: 0, maximum: 100,\n                ranges: [{\n                    start: 0, end: 100,\n                    radius: '80%', startWidth: 30,\n                    endWidth: 30, color: '#E0E0E0'\n                }],\n                pointers: [{\n                    type: 'RangeBar',\n                    value: 50.5, radius: '80%',\n                    color: '#FF2680', animation: { duration: 0 },\n                    pointerWidth: 30\n                }]\n            }]\n        });\n        let gauge2: CircularGauge = new CircularGauge({\n            centerY: '70%',\n            axes: [{\n                annotations: [{\n                    content: '<div style=\"color:#666666;font-size:35px;\">1800</div>',\n                    angle: 0,\n                    radius: '110%'\n                }],\n                lineStyle: { width: 0 },\n                startAngle: 300, endAngle: 60,\n                radius: '80%',\n                labelStyle: { font: { size: '0px' } },\n                majorTicks: { width: 0 },\n                minorTicks: { height: 0 },\n                minimum: 999, maximum: 2000,\n                ranges: [{\n                    start: 1000, end: 2000,\n                    radius: '90%',\n                    startWidth: 30, endWidth: 30,\n                    color: '#E0E0E0'\n                }],\n                pointers: [{\n                    type: 'RangeBar',\n                    value: 1800, radius: '90%',\n                    color: '#FFDD00', animation: { duration: 0 },\n                    pointerWidth: 30\n                }, {\n                    radius: '90%', value: 1800,\n                    color: '#424242',\n                    animation: { duration: 0 },\n                    pointerWidth: 9,\n                    cap: { radius: 10, color: '#424242', border: { width: 0 } }\n                }]\n            }]\n        });\n        return { 'gauge1': gauge1, 'gauge2': gauge2 };\n    }\n}","app.module":"import { CustomizationComponent } from './customization.component';\n\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\n/**\n * Circulargauge Control\n */\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\n\nimport { CircularGaugeAllModule } from '@syncfusion/ej2-ng-circulargauge';\nimport { GridModule } from '@syncfusion/ej2-ng-grids';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@NgModule({\n    imports: [CircularGaugeAllModule, GridModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [CustomizationComponent],\nbootstrap: [CustomizationComponent]\n})\nexport class AppModule { }","customization.component":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { CircularGaugeComponent } from '@syncfusion/ej2-ng-circulargauge';\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\nimport { DynamicDataSerive } from './customization.service';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\n\n/**\n * multiple axis in gauge\n */\n\n@Component({\n    selector: 'control-content',\n    templateUrl: 'customization.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class CustomizationComponent {\n    @ViewChild('customization')\n    public gauge1: CircularGaugeComponent;\n    public usageGauge: CircularGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge1);\n    public randomGauge: CircularGauge = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge2);\n    public isUsage: boolean = false;\n    public isClicked: boolean = true;\n    public majorTicks: Object = {\n        width: 0\n    }\n    public lineStyle: Object = { width: 0 }\n    public minorTicks: Object = {\n        width: 0\n    }\n    public labelStyle: Object = {\n        font: { size: '0px' }\n    }\n    public rangeWidth: number = 30;\n    public pointers: Object = [{\n        type: 'RangeBar',\n        value: 1800, radius: '90%',\n        color: '#FFDD00', animation: { duration: 0 },\n        pointerWidth: 30\n    }, {\n        radius: '90%', value: 1800,\n        color: '#424242',\n        animation: { duration: 0 },\n        pointerWidth: 9,\n        cap: { radius: 10, color: '#424242', border: { width: 0 } }\n    }];\n    public barColor: DropDownList; public rangeColor: DropDownList; public pointerColor: DropDownList;\n    ngOnInit(): void {\n        this.barColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.barColor.value.toString();\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.axes[0].pointers[0].color = barColor;\n                        this.usageGauge.refresh();\n                    } else {\n                        this.randomGauge.axes[0].pointers[0].color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].pointers[0].color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].pointers[0].color = barColor;\n                }\n            }\n        });\n        this.barColor.appendTo('#barColor');\n        this.rangeColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.rangeColor.value.toString();\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.axes[0].ranges[0].color = barColor;\n                        this.usageGauge.refresh();\n                    } else {\n                        this.randomGauge.axes[0].ranges[0].color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].ranges[0].color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].ranges[0].color = barColor;\n                }\n            }\n        });\n        this.rangeColor.appendTo('#rangeColor');\n        this.pointerColor = new DropDownList({\n            index: 0,\n            width: 100,\n            change: () => {\n                let barColor: string = this.pointerColor.value.toString();\n                if (!this.isClicked) {\n                    if (!this.isUsage) {\n                        this.randomGauge.axes[0].pointers[1].color = barColor;\n                        this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\n                        this.randomGauge.axes[0].pointers[1].cap.color = barColor;\n                        this.randomGauge.refresh();\n                    }\n                } else {\n                    this.gauge1.axes[0].pointers[1].color = barColor;\n                    this.gauge1.axes[0].pointers[1].cap.border.color = barColor;\n                    this.gauge1.axes[0].pointers[1].cap.color = barColor;\n                    this.gauge1.refresh();\n                    this.randomGauge.axes[0].pointers[1].color = barColor;\n                    this.randomGauge.axes[0].pointers[1].cap.border.color = barColor;\n                    this.randomGauge.axes[0].pointers[1].cap.color = barColor;\n                }\n            }\n        });\n        this.pointerColor.appendTo('#pointerColor');\n    }\n    ngAfterViewInit(): void {\n        document.getElementById('usage').onclick = () => {\n            if (this.isClicked) {\n                this.gauge1.destroy();\n                this.isClicked = false;\n            } else {\n                this.randomGauge.destroy();\n            }\n            this.usageGauge.appendTo('#customization-container');\n            this.isUsage = true;\n            let element: HTMLSelectElement = <HTMLSelectElement>document.getElementById('currentValue');\n            let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n            element.min = '0.5';\n            element.max = '100';\n            element.value = this.usageGauge.axes[0].pointers[0].value.toString();\n            document.getElementById('currentPointerValue').innerHTML = ' Current Value <span> &nbsp;&nbsp;&nbsp;'\n                + this.usageGauge.axes[0].pointers[0].value + '</span>';\n            this.barColor.value = this.usageGauge.axes[0].pointers[0].color;\n            this.rangeColor.value = this.usageGauge.axes[0].ranges[0].color;\n            this.pointerColor.enabled = false;\n            pointElement.className = 'e-disabled';\n            let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n            let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n            currentElement.style.border = '2px solid #E0E0E0';\n            existElement.style.border = '';\n        };\n        document.getElementById('random').onclick = () => {\n            if (this.isClicked) {\n                this.gauge1.destroy();\n                this.isClicked = false;\n            } else {\n                this.usageGauge.destroy();\n            }\n            this.randomGauge.appendTo('#customization-container');\n            this.isUsage = false;\n            let currentElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('random');\n            let existElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('usage');\n            currentElement.style.border = '2px solid #E0E0E0';\n            existElement.style.border = '';\n            let element: HTMLSelectElement = <HTMLSelectElement>document.getElementById('currentValue');\n            let pointElement: HTMLSelectElement = <HTMLSelectElement>document.getElementById('pointColor');\n            pointElement.className = 'e-enabled';\n            this.pointerColor.enabled = true;\n            element.min = '1000';\n            element.max = '2000';\n            element.value = this.randomGauge.axes[0].pointers[0].value.toString();\n            document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' +\n                this.randomGauge.axes[0].pointers[0].value + '</span>';\n            this.barColor.value = this.randomGauge.axes[0].pointers[0].color;\n            this.rangeColor.value = this.randomGauge.axes[0].ranges[0].color;\n            this.pointerColor.value = this.randomGauge.axes[0].pointers[1].color;\n        };\n\n        document.getElementById('currentValue').onpointermove = document.getElementById('currentValue').ontouchmove =\n            document.getElementById('currentValue').onchange = () => {\n                let value: number = +(<HTMLInputElement>document.getElementById('currentValue')).value;\n                if (!this.isClicked) {\n                    if (this.isUsage) {\n                        this.usageGauge.setPointerValue(0, 0, value);\n                        this.usageGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + 'GB' + '</div>');\n                    } else {\n                        this.randomGauge.setPointerValue(0, 0, value);\n                        this.randomGauge.setPointerValue(0, 1, value);\n                        this.randomGauge.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\n                    }\n                } else {\n                    this.gauge1.setPointerValue(0, 0, value);\n                    this.gauge1.setPointerValue(0, 1, value);\n                    this.gauge1.setAnnotationValue(0, 0, '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>');\n                    this.randomGauge.axes[0].pointers[0].value = value;\n                    this.randomGauge.axes[0].pointers[1].value = value;\n                    this.randomGauge.axes[0].annotations[0].content = '<div style=\"color:#666666;font-size:35px;\">' + value + '' + '</div>';\n                }\n                document.getElementById('currentPointerValue').innerHTML = 'Current Value <span> &nbsp;&nbsp;&nbsp;' + value + '</span>';\n            };\n\n        \n\n       \n        \n    }\n    ;\n\n\n\n}\n\n\n\n","customization.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ej-circulargauge #customization='' id='customization-container' style='display:block;' centerY='70%'>\n            <e-axes>\n                <e-axis startAngle=300 endAngle=60 radius='80%' minimum=999 maximum=2000 [majorTicks]=\"majorTicks\" [minorTicks]=\"minorTicks\"\n                    [labelStyle]=\"labelStyle\" [pointers]=\"pointers\" [lineStyle]=\"lineStyle\">\n                    <e-annotations>\n                        <e-annotation content='<div style=\"color:#666666;font-size:35px;\">1800</div>' angle=0 radius='110%'>\n                        </e-annotation>\n                    </e-annotations>\n                    <e-ranges>\n                        <e-range start=1000 end=2000 radius='90%' [startWidth]=\"rangeWidth\" [endWidth]=\"rangeWidth\" color='#E0E0E0'></e-range>\n                    </e-ranges>\n                </e-axis>\n            </e-axes>\n        </ej-circulargauge>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" title=\"Properties\" style=\"width: 100%\">\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <img id='random' src=\"http://npmci.syncfusion.com/production/angular/demos/src/circulargauge/images/gauge1.png\" style=\"margin-left:25px;margin-top:10px;border: 2px solid #E0E0E0\"\n                            />\n                        </td>\n                        <td>\n                            <img id='usage' src=\"http://npmci.syncfusion.com/production/angular/demos/src/circulargauge/images/gauge2.png\" style=\"margin-left:25px;margin-top:10px;\" />\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='currentPointerValue'>&nbsp;Current Value <span> &nbsp;&nbsp;&nbsp;1800</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"currentValue\" value=\"1800\" min=\"1000\" max=\"2000\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='rangebarColor'>&nbsp;RangeBar Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"barColor\" class=\"form-control\" style=\"width:90%\"> \n                                    <option value=\"#FFDD00\">#FFDD00</option>\n                                    <option value=\"#00bdae\">#00bdae</option>\n                                    <option value=\"#FF2680\">#FF2680</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='range'>&nbsp;Range Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"rangeColor\" class=\"form-control\" style=\"width:90%\"> \n                                    <option value=\"#E0E0E0\">#E0E0E0</option>\n                                    <option value=\"#7bb4eb\">#7bb4eb</option>\n                                    <option value=\"#ea7a57\">#ea7a57</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div id='pointColor'>&nbsp;Pointer Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select id=\"pointerColor\" class=\"form-control\" style=\"width:90%\"> \n                                    <option value=\"#424242\" >#424242</option>\n                                    <option value=\"#6f6fe2\">#6f6fe2</option>\n                                    <option value=\"#9e480e\">#9e480e</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","index.html":"<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n\n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\nimport { enableRipple } from '@syncfusion/ej2-base';\n\nenableRipple(true);\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}