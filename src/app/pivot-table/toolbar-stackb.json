{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\nimport {\n    IDataOptions, PivotView, FieldListService, CalculatedFieldService,\n    ToolbarService, ConditionalFormattingService, ToolbarItems, DisplayOption, IDataSet\n} from '@syncfusion/ej2-angular-pivotview';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { ChartSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/chartsettings';\nimport { ILoadedEventArgs, ChartTheme } from '@syncfusion/ej2-charts';\nenableRipple(false);\n\n/**\n * Pivot Table Toolbar Sample\n */\ndeclare var require: any;\nlet data: IDataSet[] = require('./Pivot_Data.json');\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n    providers: [CalculatedFieldService, ToolbarService, ConditionalFormattingService, FieldListService]\n})\nexport class AppComponent {\n    public dataSourceSettings: IDataOptions;\n    public gridSettings: GridSettings;\n    public toolbarOptions: ToolbarItems[];\n    public chartSettings: ChartSettings;\n    public displayOption: DisplayOption;\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    saveReport(args: any) {\n        let reports = [];\n        let isSaved: boolean = false;\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reports = JSON.parse(localStorage.pivotviewReports);\n        }\n        if (args.report && args.reportName && args.reportName !== '') {\n            reports.map(function (item: any): any {\n                if (args.reportName === item.reportName) {\n                    item.report = args.report; isSaved = true;\n                }\n            });\n            if (!isSaved) {\n                reports.push(args);\n            }\n            localStorage.pivotviewReports = JSON.stringify(reports);\n        }\n    }\n    fetchReport(args: any) {\n        let reportCollection: string[] = [];\n        let reeportList: string[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportCollection.map(function (item: any): void { reeportList.push(item.reportName); });\n        args.reportName = reeportList;\n    }\n    loadReport(args: any) {\n        let reportCollection: string[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportCollection.map(function (item: any): void {\n            if (args.reportName === item.reportName) {\n                args.report = item.report;\n            }\n        });\n        if (args.report) {\n            this.pivotObj.dataSourceSettings = JSON.parse(args.report).dataSourceSettings;\n        }\n    }\n    removeReport(args: any) {\n        let reportCollection: any[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        for (let i: number = 0; i < reportCollection.length; i++) {\n            if (reportCollection[i].reportName === args.reportName) {\n                reportCollection.splice(i, 1);\n            }\n        }\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportCollection);\n        }\n    }\n    renameReport(args: any) {\n        let reportCollection: string[] = [];\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            reportCollection = JSON.parse(localStorage.pivotviewReports);\n        }\n        reportCollection.map(function (item: any): any { if (args.reportName === item.reportName) { item.reportName = args.rename; } });\n        if (localStorage.pivotviewReports && localStorage.pivotviewReports !== \"\") {\n            localStorage.pivotviewReports = JSON.stringify(reportCollection);\n        }\n    }\n    newReport() {\n        this.pivotObj.setProperties({ dataSourceSettings: { columns: [], rows: [], values: [], filters: [] } }, false);\n    }\n\tbeforeToolbarRender(args: any) {\n        args.customToolbar.splice(6, 0, {\n            type: 'Separator' \n        });\n        args.customToolbar.splice(9, 0, {\n            type: 'Separator' \n        });\n    }\n\n    ngOnInit(): void {\n        this.chartSettings = {\n            title: 'Sales Analysis',\n            chartSeries: { type: 'Column' },\n            // load: (args: ILoadedEventArgs) => {\n            //     let selectedTheme: string = location.hash.split('/')[1];\n            //     selectedTheme = selectedTheme ? selectedTheme : 'Material';\n            //     args.chart.theme = (selectedTheme.charAt(0).toUpperCase() +\n            //         selectedTheme.slice(1)) as ChartTheme;\n            // }\n        } as ChartSettings;\n\n        this.displayOption = { view: 'Both' } as DisplayOption;\n        this.gridSettings = {\n            columnWidth: 140\n        } as GridSettings;\n\n        this.toolbarOptions = ['New', 'Save', 'SaveAs', 'Rename', 'Remove', 'Load',\n            'Grid', 'Chart', 'Export', 'SubTotal', 'GrandTotal', 'ConditionalFormatting', 'FieldList'] as ToolbarItems[];\n\n        this.dataSourceSettings = {\n            enableSorting: true,\n            columns: [{ name: 'Year' }, { name: 'Order_Source', caption: 'Order Source' }],\n            rows: [{ name: 'Country' }, { name: 'Products' }],\n            formatSettings: [{ name: 'Amount', format: 'C0' }],\n            dataSource: data,\n            expandAll: false,\n            values: [{ name: 'In_Stock', caption: 'In Stock' }, { name: 'Sold', caption: 'Units Sold' },\n            { name: 'Amount', caption: 'Sold Amount' }],\n            filters: [{ name: 'Product_Categories', caption: 'Product Categories' }]\n        };\n    }\n}","app/app.module.ts":"import { CheckBoxAllModule, RadioButtonAllModule, ButtonAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { PivotFieldListAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { PivotViewAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, HttpModule, ToolbarModule, PivotViewAllModule, PivotFieldListAllModule, BrowserModule, NumericTextBoxAllModule, ButtonAllModule, CheckBoxAllModule, RadioButtonAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"\n<div class=\"control-section\" id=\"pivot-table-section\">\n    <div>\n        <ejs-pivotview #pivotview id='PivotView' [dataSourceSettings]=dataSourceSettings allowExcelExport='true'\n            allowConditionalFormatting='true' allowPdfExport='true' showToolbar='true' allowCalculatedField='true'\n            showFieldList='true' width='100%' [chartSettings]='chartSettings' [displayOption]='displayOption'\n            height='300' [gridSettings]='gridSettings' [toolbar]='toolbarOptions' (saveReport)='saveReport($event)'\n            (loadReport)='loadReport($event)' (fetchReport)='fetchReport($event)' (renameReport)='renameReport($event)'\n            (removeReport)='removeReport($event)' (newReport)='newReport()' (toolbarRender)='beforeToolbarRender($event)'>\n        </ejs-pivotview>\n    </div>\n</div>","app.component.css":".e-pivotview {\n    width: 100%;\n    height:100%;\n}\n\n@media only screen and (max-width: 400px) {\n    #pivot-table-section {\n        overflow: auto;\n    }\n}"}