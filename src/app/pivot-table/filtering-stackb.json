{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { IDataOptions, PivotView, FilterType, IDataSet } from '@syncfusion/ej2-angular-pivotview';\nimport { DropDownList, MultiSelect, ChangeEventArgs, SelectEventArgs, RemoveEventArgs, PopupEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nimport { FilterModel } from '@syncfusion/ej2-pivotview/src/pivotview/model/datasourcesettings-model';\nenableRipple(false);\nMultiSelect.Inject(CheckBoxSelection);\n/**\n * Pivot Table Filtering Sample.\n */\n/* tslint:disable */\ndeclare var require: any;\nlet Pivot_Data: IDataSet[] = require('./Pivot_Data.json');\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n})\n\nexport class AppComponent {\n    public dataSourceSettings: IDataOptions;\n    public fieldCollections: { [key: string]: { [key: string]: Object }[] } = {};\n    public filterCollections: { [key: string]: FilterModel } = {};\n    public isInitial: boolean = true;\n    public type: string[] = ['Include', 'Exclude'];\n    public values: { [key: string]: Object }[] = [];\n    public fields: string[] = ['Country', 'Products', 'Year'];\n    public fieldsddl: DropDownList;\n    public typeddl: DropDownList;\n    public valuesddl: MultiSelect;\n    public applyBtn: Button;\n    public gridSettings: GridSettings;\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    /** To get the checked members here as string array. */\n    getSelectedMembers(field: string): string[] {\n        let membersColl: string[] = [];\n        let members: { [key: string]: Object }[] = this.fieldCollections[field];\n        let memLength: number = members.length - 1;\n        while (memLength > -1) {\n            if (members[memLength]['Checked'] === members[memLength]['Member'] + '_' + true) {\n                membersColl.push(members[memLength]['Member'].toString());\n            }\n            memLength--;\n        }\n        return membersColl;\n    }\n\n    /** To set the checked status of the members maintained in the object fieldCollections. */\n    setMemberCheckedState(field: string, member: string, checkedState: string): void {\n        let members: { [key: string]: Object }[] = this.fieldCollections[field];\n        let memLength: number = members.length - 1;\n        while (memLength > -1) {\n            if (members[memLength]['Member'] === member) {\n                members[memLength]['Checked'] = checkedState;\n                break;\n            }\n            memLength--;\n        }\n    }\n\n    /** To set the filter type of the members maintained in the object filterCollections. */\n    updateFilterType(fieldName: string): FilterType {\n        if ((this.fieldsddl as any).itemData === fieldName) {\n            return (this.typeddl as any).itemData;\n        } else if (this.filterCollections[fieldName]) {\n            return this.filterCollections[fieldName].type;\n        } else {\n            return 'Exclude';\n        }\n    }\n\n    /** To set disabled/enabled state in the Apply button. */\n    setApplyBtnState(): void {\n        let fieldArray: string[] = ['Country', 'Products', 'Year'];\n        let loopCount: number = fieldArray.length - 1;\n        let isSelected: boolean = false;\n        let isFiltersAvail: boolean = false;\n        while (loopCount > -1) {\n            if (this.getSelectedMembers(fieldArray[loopCount]).length > 0) {\n                isSelected = true;\n                break;\n            }\n            if (this.pivotObj.dataSourceSettings.filterSettings &&\n                this.pivotObj.dataSourceSettings.filterSettings[loopCount] &&\n                this.pivotObj.dataSourceSettings.filterSettings[loopCount].items.length > 0) {\n                isFiltersAvail = true;\n            }\n            loopCount--;\n        }\n        this.applyBtn.disabled = (!isSelected && isFiltersAvail) ? isSelected : !isSelected;\n    }\n\n    ondataBound(args: any): void {\n        if (this.isInitial) {\n            /** To fill the members for each fields into the object fieldCollections. */\n            let fieldCnt: number = this.fields.length - 1;\n            while (fieldCnt > -1) {\n                let members: string[] = Object.keys(this.pivotObj.engineModule.fieldList[this.fields[fieldCnt]].members);\n                let memberCnt: number = members.length - 1;\n                let memberColl: { [key: string]: Object }[] = [];\n                while (memberCnt > -1) {\n                    memberColl.push({ Member: members[memberCnt], Checked: members[memberCnt] + '_' + false });\n                    memberCnt--;\n                }\n                this.fieldCollections[this.fields[fieldCnt]] = memberColl;\n                fieldCnt--;\n            }\n            this.values = this.fieldCollections[this.fields[0]];\n            this.valuesddl.dataSource = this.values;\n            this.valuesddl.dataBind();\n            this.isInitial = false;\n        }\n        for (let field of this.pivotObj.dataSourceSettings.filterSettings) {\n            this.filterCollections[field.name] = field;\n        }\n    }\n\n    ngOnInit(): void {\n        this.gridSettings = {\n            columnWidth: 140\n        } as GridSettings;\n\n        this.dataSourceSettings = {\n            values: [{ name: 'In_Stock', caption: 'In Stock' }, { name: 'Sold', caption: 'Units Sold' },\n            { name: 'Amount', caption: 'Sold Amount' }],\n            filters: [{ name: 'Product_Categories', caption: 'Product Categories' }],\n            rows: [{ name: 'Country' }, { name: 'Products' }],\n            formatSettings: [{ name: 'Amount', format: 'C0' }],\n            columns: [{ name: 'Year' }],\n            dataSource: Pivot_Data,\n            expandAll: false\n        };\n\n        this.valuesddl = new MultiSelect({\n            dataSource: this.values,\n            mode: 'CheckBox',\n            showDropDownIcon: true,\n            showClearButton: false,\n            enableSelectionOrder: false,\n            fields: { text: 'Member' },\n            select: (args: SelectEventArgs): void => {\n                this.applyBtn.disabled = false;\n                this.applyBtn.dataBind();\n                this.setMemberCheckedState((<any>this.fieldsddl).itemData, args.item.textContent, args.item.textContent + '_' + true);\n            },\n            removed: (args: RemoveEventArgs): void => {\n                this.setMemberCheckedState((<any>this.fieldsddl).itemData, args.item.textContent, args.item.textContent + '_' + false);\n                this.setApplyBtnState();\n                this.applyBtn.dataBind();\n            },\n            open: (args: PopupEventArgs): void => {\n                if (args.popup.element.querySelector(\".e-filter-parent\")) {\n                    (args.popup.element.querySelector(\".e-filter-parent\") as HTMLElement).style.display = 'none';\n                }\n            }\n        });\n        this.valuesddl.appendTo('#values');\n\n        this.fieldsddl = new DropDownList({\n            dataSource: this.fields,\n            index: 0,\n            width: '98%',\n            change: (args: ChangeEventArgs) => {\n                this.valuesddl.dataSource = this.fieldCollections[args.value.toString()];\n                this.valuesddl.value = this.getSelectedMembers(args.value.toString());\n                if (this.filterCollections[args.value.toString()]) {\n                    this.typeddl.value = this.filterCollections[args.value.toString()].type;\n                }\n                this.valuesddl.dataBind();\n                this.typeddl.dataBind();\n            }\n        });\n        this.fieldsddl.appendTo('#fields');\n\n        this.typeddl = new DropDownList({\n            dataSource: this.type,\n            width: '98%',\n            index: 1\n        });\n        this.typeddl.appendTo('#type');\n\n        this.applyBtn = new Button({\n            cssClass: 'e-flat', isPrimary: true, disabled: true\n        });\n        this.applyBtn.appendTo('#apply');\n\n        document.getElementById('apply').onclick = () => {\n            /** You can set your filter settings here. */\n            let filterItems0: string[] = this.getSelectedMembers(this.fields[0]);\n            let filterItems1: string[] = this.getSelectedMembers(this.fields[1]);\n            let filterItems2: string[] = this.getSelectedMembers(this.fields[2]);\n            this.pivotObj.dataSourceSettings.filterSettings = [\n                { name: this.fields[0], items: this.getSelectedMembers(this.fields[0]), type: this.updateFilterType(this.fields[0]) },\n                { name: this.fields[1], items: this.getSelectedMembers(this.fields[1]), type: this.updateFilterType(this.fields[1]) },\n                { name: this.fields[2], items: this.getSelectedMembers(this.fields[2]), type: this.updateFilterType(this.fields[2]) },\n            ];\n            if (filterItems0.length === 0 && filterItems1.length === 0 && filterItems2.length === 0) {\n                this.applyBtn.disabled = true;\n            }\n        };\n    }\n}","app/app.module.ts":"import { CheckBoxAllModule, RadioButtonAllModule, ButtonAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { PivotFieldListAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { PivotViewAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from '../app.component';\n\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, HttpModule, ToolbarModule, PivotViewAllModule, PivotFieldListAllModule, BrowserModule, NumericTextBoxAllModule, ButtonAllModule, CheckBoxAllModule, RadioButtonAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\" style=\"overflow:auto;\">\n    <div class=\"col-lg-8\">\n        <ejs-pivotview #pivotview id='PivotView' [dataSourceSettings]=dataSourceSettings width='100%' height='300' (dataBound)='ondataBound($event)' [gridSettings]='gridSettings'>\n        </ejs-pivotview>\n    </div>\n    <div class=\"col-lg-4 property-section pivottable-property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tbody>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div>Fields:\n                                </div>\n                            </td>\n                            <td>\n                                <div>\n                                    <input type=\"text\" tabindex=\"1\" id='fields' />\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div>Members:\n                                </div>\n                            </td>\n                            <td style=\"padding-bottom: 16px\">\n                                <div class=\"valuecls\">\n                                    <input type=\"text\" tabindex=\"1\" id='values' />\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px\">\n                            <td>\n                                <div>Filter Type:\n                                </div>\n                            </td>\n                            <td>\n                                <div style=\"margin-top:-5px\">\n                                    <input type=\"text\" tabindex=\"1\" id='type' />\n                                </div>\n                            </td>\n                        </tr>\n                        <tr style=\"height: 50px\">\n                            <td></td>\n                            <td>\n                                <div style=\"float: right;margin-right: 4px\">\n                                    <button id=\"apply\">Apply</button>\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".e-pivotview {\n    width: 100%;\n    height:100%;\n}\n.e-pivottable .e-static {\n    width: 80% !important;\n}\n.pivottable-property-section table tr td:first-child {\n    width: 20%;\n}\n.pivottable-property-section {\n    overflow: auto;\n}"}