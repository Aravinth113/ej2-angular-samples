{"dependencies.json":"{\"@syncfusion/ej2-base\": \"*\", \"@syncfusion/ej2-buttons\": \"*\", \"@syncfusion/ej2-splitbuttons\": \"*\", \"@syncfusion/ej2-calendars\": \"*\", \"@syncfusion/ej2-charts\": \"*\", \"@syncfusion/ej2-diagrams\": \"*\", \"@syncfusion/ej2-maps\": \"*\", \"@syncfusion/ej2-treemap\": \"*\", \"@syncfusion/ej2-circulargauge\": \"*\", \"@syncfusion/ej2-data\": \"*\", \"@syncfusion/ej2-dropdowns\": \"*\", \"@syncfusion/ej2-grids\": \"*\", \"@syncfusion/ej2-inputs\": \"*\", \"@syncfusion/ej2-lists\": \"*\", \"@syncfusion/ej2-navigations\": \"*\", \"@syncfusion/ej2-popups\": \"*\", \"@syncfusion/ej2-lineargauge\": \"*\", \"@syncfusion/ej2-pdf-export\": \"*\", \"@syncfusion/ej2-compression\": \"*\", \"@syncfusion/ej2-excel-export\": \"*\", \"@syncfusion/ej2-file-utils\": \"*\", \"@syncfusion/ej2-svg-base\": \"*\", \"@syncfusion/ej2-documenteditor\": \"*\", \"@syncfusion/ej2-richtexteditor\": \"*\", \"@syncfusion/ej2-notifications\": \"*\", \"@syncfusion/ej2-heatmap\": \"*\", \"@syncfusion/ej2-pivotview\": \"*\", \"@syncfusion/ej2-schedule\": \"*\", \"@syncfusion/ej2-layouts\": \"*\", \"@syncfusion/ej2-angular-base\": \"*\", \"@syncfusion/ej2-angular-buttons\": \"*\", \"@syncfusion/ej2-angular-splitbuttons\": \"*\", \"@syncfusion/ej2-angular-calendars\": \"*\", \"@syncfusion/ej2-angular-charts\": \"*\", \"@syncfusion/ej2-angular-diagrams\": \"*\", \"@syncfusion/ej2-angular-maps\": \"*\", \"@syncfusion/ej2-angular-treemap\": \"*\", \"@syncfusion/ej2-angular-circulargauge\": \"*\", \"@syncfusion/ej2-angular-dropdowns\": \"*\", \"@syncfusion/ej2-angular-grids\": \"*\", \"@syncfusion/ej2-angular-inputs\": \"*\", \"@syncfusion/ej2-angular-lists\": \"*\", \"@syncfusion/ej2-angular-navigations\": \"*\", \"@syncfusion/ej2-angular-popups\": \"*\", \"@syncfusion/ej2-angular-lineargauge\": \"*\", \"@syncfusion/ej2-angular-documenteditor\": \"*\", \"@syncfusion/ej2-angular-richtexteditor\": \"*\", \"@syncfusion/ej2-angular-notifications\": \"*\", \"@syncfusion/ej2-angular-heatmap\": \"*\", \"@syncfusion/ej2-angular-pivotview\": \"*\", \"@syncfusion/ej2-angular-schedule\": \"*\", \"@syncfusion/ej2-angular-layouts\": \"*\" , \"@angular/http\": \"*\", \"rxjs-compat\":\"*\"}","main.ts":"import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n","polyfills.ts":"/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol';\n// import 'core-js/es6/object';\n// import 'core-js/es6/function';\n// import 'core-js/es6/parse-int';\n// import 'core-js/es6/parse-float';\n// import 'core-js/es6/number';\n// import 'core-js/es6/math';\n// import 'core-js/es6/string';\n// import 'core-js/es6/date';\n// import 'core-js/es6/array';\n// import 'core-js/es6/regexp';\n// import 'core-js/es6/map';\n// import 'core-js/es6/weak-map';\n// import 'core-js/es6/set';\n\n/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n// import 'classlist.js';  // Run `npm install --save classlist.js`.\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect';\n\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\nimport 'core-js/es7/reflect';\n\n\n/**\n * Web Animations `@angular/platform-browser/animations`\n * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n/**\n * By default, zone.js will patch all possible macroTask and DomEvents\n * user can disable parts of macroTask/DomEvents patch by setting following flags\n */\n\n // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n\n /*\n * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n * with the following flag, it will bypass `zone.js` patch for IE/Edge\n */\n// (window as any).__Zone_enable_cross_context_check = true;\n\n/***************************************************************************************************\n * Zone JS is required by default for Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n","angular.json":"{\n    \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n    \"version\": 1,\n    \"newProjectRoot\": \"projects\",\n    \"projects\": {\n      \"demo\": {\n        \"root\": \"\",\n        \"sourceRoot\": \"\",\n        \"projectType\": \"application\",\n        \"prefix\": \"app\",\n        \"schematics\": {},\n        \"architect\": {\n          \"build\": {\n            \"builder\": \"@angular-devkit/build-angular:browser\",\n            \"options\": {\n              \"outputPath\": \"dist/demo\",\n              \"index\": \"index.html\",\n              \"main\": \"main.ts\",\n              \"polyfills\": \"polyfills.ts\",\n              \"tsConfig\": \"tsconfig.app.json\",\n              \"assets\": [\n                \"favicon.ico\",\n                \"assets\"\n              ],\n              \"styles\": [\n                \n              ],\n              \"scripts\": []\n            },\n            \"configurations\": {\n              \"production\": {\n                \"fileReplacements\": [\n                  {\n                    \"replace\": \"src/environments/environment.ts\",\n                    \"with\": \"src/environments/environment.prod.ts\"\n                  }\n                ],\n                \"optimization\": true,\n                \"outputHashing\": \"all\",\n                \"sourceMap\": false,\n                \"extractCss\": true,\n                \"namedChunks\": false,\n                \"aot\": true,\n                \"extractLicenses\": true,\n                \"vendorChunk\": false,\n                \"buildOptimizer\": true\n              }\n            }\n          },\n          \"serve\": {\n            \"builder\": \"@angular-devkit/build-angular:dev-server\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            },\n            \"configurations\": {\n              \"production\": {\n                \"browserTarget\": \"demo:build:production\"\n              }\n            }\n          },\n          \"extract-i18n\": {\n            \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n            \"options\": {\n              \"browserTarget\": \"demo:build\"\n            }\n          },\n          \"test\": {\n            \"builder\": \"@angular-devkit/build-angular:karma\",\n            \"options\": {\n              \"main\": \"src/test.ts\",\n              \"polyfills\": \"src/polyfills.ts\",\n              \"tsConfig\": \"src/tsconfig.spec.json\",\n              \"karmaConfig\": \"src/karma.conf.js\",\n              \"styles\": [\n                \"styles.css\"\n              ],\n              \"scripts\": [],\n              \"assets\": [\n                \"src/favicon.ico\",\n                \"src/assets\"\n              ]\n            }\n          },\n          \"lint\": {\n            \"builder\": \"@angular-devkit/build-angular:tslint\",\n            \"options\": {\n              \"tsConfig\": [\n                \"src/tsconfig.app.json\",\n                \"src/tsconfig.spec.json\"\n              ],\n              \"exclude\": [\n                \"**/node_modules/**\"\n              ]\n            }\n          }\n        }\n      }\n    },\n    \"defaultProject\": \"demo\"\n  }\n  \n","environments/environment.ts":"// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","environments/environment.prod.ts":"export const environment = {\n  production: true\n};\n","index.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Window</title>\n<link href=\"../../styles/OpenNew.css\" rel=\"stylesheet\">\n  <link href=\"//cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\" />\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body class=\"ej2-new\"> \n\n    <noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-WLQL39J\"height=\"0\"width=\"0\"style=\"display:none;visibility:hidden\"></iframe></noscript>\n    <div hidden id=\"sync-analytics\" data-queue=\"EJ2 - Angular - Demos\"></div>\n\n  <app-root></app-root>\n</body>\n</html>\n","app.component.ts":"import { Component, OnInit, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { IDataOptions, PivotView, IAxisSet, Condition, IDataSet } from '@syncfusion/ej2-angular-pivotview';\nimport { HyperCellClickEventArgs, HyperlinkSettings } from '@syncfusion/ej2-angular-pivotview';\nimport { DropDownList, ChangeEventArgs } from '@syncfusion/ej2-dropdowns';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { NumericTextBox, MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { GridSettings } from '@syncfusion/ej2-pivotview/src/pivotview/model/gridsettings';\nimport { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(false);\n/**\n * Pivot Table Hyperlink Sample.\n */\n/* tslint:disable */\ndeclare var require: any;\nlet Pivot_Data: IDataSet[] = require('./Pivot_Data.json');\n@Component({\n    selector: 'app-root',\n    templateUrl: 'app.component.html',\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['app.component.css'],\n})\n\nexport class AppComponent {\n    public operators: string[] = ['Equals', 'NotEquals', 'GreaterThan', 'GreaterThanOrEqualTo',\n        'LessThan', 'LessThanOrEqualTo', 'Between', 'NotBetween'];\n    public measures: { [key: string]: Object }[] = [\n        { value: 'In_Stock', text: 'In Stock' },\n        { value: 'Sold', text: 'Units Sold' },\n        { value: 'Amount', text: 'Sold Amount' }\n    ];\n    public options: { [key: string]: Object }[] = [\n        { value: 'allcells', text: 'All cells' },\n        { value: 'rowheader', text: 'Row headers' },\n        { value: 'columnheader', text: 'Column headers' },\n        { value: 'valuecells', text: 'Value cells' },\n        { value: 'summarycells', text: 'Summary cells' },\n        { value: 'conditional', text: 'Condition based option' },\n        { value: 'headertext', text: 'Header based option' }\n    ];\n    public dataSourceSettings: IDataOptions;\n    public hyperlinkSettings: HyperlinkSettings;\n    public optionsdll: DropDownList;\n    public measuresddl: DropDownList;\n    public operatorddl: DropDownList;\n    public valueInput1: NumericTextBox;\n    public valueInput2: NumericTextBox;\n    public textInput: MaskedTextBox;\n    public applyBtn: Button;\n    public clearBtn: Button;\n    public gridSettings: GridSettings;\n\n    @ViewChild('pivotview')\n    public pivotObj: PivotView;\n\n    public eventHeader: string = 'Low Battery';\n    public showCloseIcon: Boolean = false;\n    public isModel: Boolean = false;\n    public visible: Boolean = false;\n    // public confirmCloseIcon: Boolean = true;\n    public target: string = '.control-section';\n    public alertWidth: string = '300px';\n\n    onCellClick(args: HyperCellClickEventArgs): void {\n        let cell: string = '';\n        if (args.currentCell.className.indexOf('e-stot') > -1 ||\n            args.currentCell.className.indexOf('e-gtot') > -1 ||\n            args.currentCell.className.indexOf('e-summary') > -1) {\n            cell += 'Summary ';\n        }\n        if (args.currentCell.querySelector('.e-headercelldiv') && !(args.data as IAxisSet).indexObject) {\n            cell += 'Value Header ';\n        } else if (args.currentCell.className.indexOf('e-rowsheader') > -1) {\n            cell += 'Row Header ';\n        } else if (args.currentCell.className.indexOf('e-columnsheader') > -1) {\n            cell += 'Column Header ';\n        } else if (args.currentCell.className.indexOf('e-valuescontent') > -1) {\n            cell += 'Value ';\n        }\n        if (args.currentCell.querySelector('a') &&\n            (args.currentCell.querySelector('a').innerText === 'France' || args.currentCell.querySelector('a').innerText === 'Germany')) {\n            let country: string = args.currentCell.querySelector('a').innerText;\n            args.currentCell.querySelector('a').setAttribute('data-url', (country === 'France' ?\n                'https://en.wikipedia.org/wiki/France' : 'https://en.wikipedia.org/wiki/Germany'));\n            args.cancel = false;\n        } else {\n            this.appendElement('<b>' + cell + '</b>' + ' cell click event called<hr>');\n        }\n    }\n\n    appendElement(html: string): void {\n        let span: HTMLElement = document.createElement('span');\n        span.innerHTML = html;\n        let log: HTMLElement = document.getElementById('EventLog');\n        log.insertBefore(span, log.firstChild);\n    }\n\n    onChange(args: ChangeEventArgs): void {\n        (document.querySelector('.text1cls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.text2cls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.measurecls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.conditioncls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.input1cls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.input2cls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.textinputcls') as HTMLElement).style.display = 'none';\n        (document.querySelector('.updatecls') as HTMLElement).style.display = 'none';\n        if (args.value === 'allcells') {\n            this.pivotObj.hyperlinkSettings = {\n                showHyperlink: true,\n                showRowHeaderHyperlink: false,\n                showColumnHeaderHyperlink: false,\n                showValueCellHyperlink: false,\n                showSummaryCellHyperlink: false,\n                headerText: undefined,\n                conditionalSettings: []\n            };\n        } else if (args.value === 'rowheader') {\n            this.pivotObj.hyperlinkSettings = {\n                showHyperlink: false,\n                showRowHeaderHyperlink: true,\n                showColumnHeaderHyperlink: false,\n                showValueCellHyperlink: false,\n                showSummaryCellHyperlink: false,\n                headerText: undefined,\n                conditionalSettings: []\n            };\n        } else if (args.value === 'columnheader') {\n            this.pivotObj.hyperlinkSettings = {\n                showHyperlink: false,\n                showRowHeaderHyperlink: false,\n                showColumnHeaderHyperlink: true,\n                showValueCellHyperlink: false,\n                showSummaryCellHyperlink: false,\n                headerText: undefined,\n                conditionalSettings: []\n            };\n        } else if (args.value === 'valuecells') {\n            this.pivotObj.hyperlinkSettings = {\n                showHyperlink: false,\n                showRowHeaderHyperlink: false,\n                showColumnHeaderHyperlink: false,\n                showValueCellHyperlink: true,\n                showSummaryCellHyperlink: false,\n                headerText: undefined,\n                conditionalSettings: []\n            };\n        } else if (args.value === 'summarycells') {\n            this.pivotObj.hyperlinkSettings = {\n                showHyperlink: false,\n                showRowHeaderHyperlink: false,\n                showColumnHeaderHyperlink: false,\n                showValueCellHyperlink: false,\n                showSummaryCellHyperlink: true,\n                headerText: undefined,\n                conditionalSettings: []\n            };\n        } else if (args.value === 'conditional') {\n            (document.querySelector('.text1cls') as HTMLElement).style.display = '';\n            (document.querySelector('.measurecls') as HTMLElement).style.display = '';\n            (document.querySelector('.conditioncls') as HTMLElement).style.display = '';\n            (document.querySelector('.input1cls') as HTMLElement).style.display = '';\n            if (this.operatorddl.value === 'Between' || this.operatorddl.value === 'NotBetween') {\n                (document.querySelector('.input2cls') as HTMLElement).style.display = '';\n            }\n            (document.querySelector('.updatecls') as HTMLElement).style.display = '';\n        } else if (args.value === 'headertext') {\n            (document.querySelector('.text2cls') as HTMLElement).style.display = '';\n            (document.querySelector('.textinputcls') as HTMLElement).style.display = '';\n            (document.querySelector('.updatecls') as HTMLElement).style.display = '';\n        }\n    }\n\n    ngOnInit(): void {\n        this.gridSettings = {\n            columnWidth: 140\n        } as GridSettings;\n\n        this.hyperlinkSettings = {\n            showValueCellHyperlink: true,\n            cssClass: 'e-custom-class'\n        } as HyperlinkSettings;\n\n        this.dataSourceSettings = {\n            formatSettings: [{ name: 'Amount', format: 'C0' }],\n            drilledMembers: [{ name: 'Country', items: ['France', 'Germany'] }],\n            filters: [{ name: 'Product_Categories', caption: 'Product Categories' }],\n            rows: [{ name: 'Country' }, { name: 'Products' }],\n            columns: [{ name: 'Year' }],\n            values: [{ name: 'In_Stock', caption: 'In Stock' }, { name: 'Sold', caption: 'Units Sold' },\n            { name: 'Amount', caption: 'Sold Amount' }],\n            dataSource: Pivot_Data,\n            expandAll: true\n        };\n\n        this.optionsdll = new DropDownList({\n            dataSource: this.options,\n            fields: { value: 'value', text: 'text' },\n            value: 'valuecells',\n            width: '100%',\n            change: this.onChange.bind(this)\n        });\n        this.optionsdll.appendTo('#hyperlinks');\n        this.measuresddl = new DropDownList({\n            dataSource: this.measures,\n            fields: { value: 'value', text: 'text' },\n            value: 'In Stock',\n            width: '100%'\n        });\n        this.measuresddl.appendTo('#measures');\n        this.operatorddl = new DropDownList({\n            value: 'NotEquals',\n            dataSource: this.operators,\n            change: function (args: ChangeEventArgs) {\n                if (args.value === 'Between' || args.value === 'NotBetween') {\n                    (document.querySelector('.input2cls') as HTMLElement).style.display = '';\n                } else {\n                    (document.querySelector('.input2cls') as HTMLElement).style.display = 'none';\n                }\n            }\n        });\n        this.operatorddl.appendTo('#conditions');\n        this.valueInput1 = new NumericTextBox({\n            width: '100%',\n            value: 0,\n            placeholder: 'Example: 400'\n        });\n        this.valueInput1.appendTo('#value1');\n        this.valueInput2 = new NumericTextBox({\n            width: '100%',\n            value: 0,\n            placeholder: 'Example: 4000'\n        });\n        this.valueInput2.appendTo('#value2');\n        this.textInput = new MaskedTextBox({\n            value: '',\n            placeholder: 'Example: \"FY 2015.In Stock\"',\n            width: '100%'\n        });\n        this.textInput.appendTo('#text');\n        this.applyBtn = new Button({\n            isPrimary: true\n        });\n        this.applyBtn.appendTo('#apply');\n\n        document.getElementById('apply').onclick = () => {\n            if (this.optionsdll.value === 'conditional') {\n                this.pivotObj.hyperlinkSettings = {\n                    showHyperlink: false,\n                    showRowHeaderHyperlink: false,\n                    showColumnHeaderHyperlink: false,\n                    showValueCellHyperlink: false,\n                    showSummaryCellHyperlink: false,\n                    headerText: undefined,\n                    conditionalSettings: [\n                        {\n                            measure: this.measuresddl.value as string,\n                            conditions: this.operatorddl.value as Condition,\n                            value1: this.valueInput1.value,\n                            value2: this.valueInput2.value\n                        }\n                    ]\n                };\n            } else if (this.optionsdll.value === 'headertext') {\n                this.pivotObj.hyperlinkSettings = {\n                    showHyperlink: false,\n                    showRowHeaderHyperlink: false,\n                    showColumnHeaderHyperlink: false,\n                    showValueCellHyperlink: false,\n                    showSummaryCellHyperlink: false,\n                    headerText: this.textInput.value,\n                    conditionalSettings: []\n                };\n            }\n        };\n\n        this.clearBtn = new Button();\n        this.clearBtn.appendTo('#clear');\n\n        document.getElementById('clear').onclick = () => {\n            document.getElementById('EventLog').innerHTML = '';\n        };\n    }\n}","app/app.module.ts":"import { CheckBoxAllModule, RadioButtonAllModule, ButtonAllModule } from '@syncfusion/ej2-angular-buttons';\n\nimport { ToolbarModule } from '@syncfusion/ej2-angular-navigations';\n\nimport { NumericTextBoxAllModule } from '@syncfusion/ej2-angular-inputs';\n\nimport { PivotFieldListAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { PivotViewAllModule } from '@syncfusion/ej2-angular-pivotview';\n\nimport { HttpModule } from '@angular/http';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { RouterModule } from '@angular/router';\n\nimport { CommonModule } from '@angular/common';\n\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from '../app.component';\n@NgModule({ declarations: [ AppComponent ], imports: [ CommonModule, HttpModule, ToolbarModule, PivotViewAllModule, PivotFieldListAllModule, BrowserModule, NumericTextBoxAllModule, ButtonAllModule, CheckBoxAllModule, RadioButtonAllModule], providers: [], bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","app.component.html":"<div class=\"control-section\" style=\"overflow:auto;\">\n    <div class=\"col-lg-8\">\n        <ejs-pivotview #pivotview id='PivotView' [dataSourceSettings]=dataSourceSettings width='100%' height='600' showTooltip='false'\n            (hyperlinkCellClick)='onCellClick($event)' [gridSettings]='gridSettings' [hyperlinkSettings]='hyperlinkSettings'>\n        </ejs-pivotview>\n    </div>\n    <div class=\"col-lg-4 property-section pivottable-property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n                <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%;height:100%;\">\n                <tbody>\n                    <tr style=\"height: 50px\">\n                        <td>\n                            <div>Show Hyperlink:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div>\n                                <input type=\"text\" tabindex=\"1\" id=\"hyperlinks\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"text1cls\" style=\"height: 50px; display: none\">\n                        <td colspan=\"2\">\n                            <div>Condition based settings:\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"measurecls\" style=\"height: 50px; display: none\">\n                        <td>\n                            <div>Measures:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div>\n                                <input type=\"text\" tabindex=\"1\" id=\"measures\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"conditioncls\" style=\"height: 50px; display: none\">\n                        <td>\n                            <div>Condition:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div class=\"conditionscls\">\n                                <input type=\"text\" tabindex=\"1\" id=\"conditions\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"input1cls\" style=\"height: 50px; display: none\">\n                        <td>\n                            <div>Value 1:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div class=\"value1cls\">\n                                <input type=\"text\" tabindex=\"1\" id=\"value1\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"input2cls\" style=\"height: 50px; display: none\">\n                        <td>\n                            <div>Value 2:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div class=\"value2cls\">\n                                <input type=\"text\" tabindex=\"1\" id=\"value2\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"text2cls\" style=\"height: 50px; display: none\">\n                        <td colspan=\"2\">\n                            <div>Header based settings:\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"textinputcls\" style=\"height: 50px; display: none\">\n                        <td>\n                            <div>Header Text:\n                            </div>\n                        </td>\n                        <td style=\"padding-bottom: 16px\">\n                            <div class=\"textcls\">\n                                <input type=\"text\" tabindex=\"1\" id='text' />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr class=\"updatecls\" style=\"height: 50px; display: none\">\n                        <td colspan=\"2\">\n                            <div style=\"float:right;margin-right: 4px\">\n                                <button id=\"apply\">Apply</button>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\">\n                            <div><b>\n                                    <hr>Event Trace:\n                                </b>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colspan=\"2\">\n                            <div class=\"eventarea\" style=\"height: 160px;overflow: auto\">\n                                <span class=\"EventLog\" id=\"EventLog\" style=\"word-break: normal;\"></span>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr style=\"height: 50px\">\n                        <td>\n                        <td colspan=\"2\">\n                            <div class=\"evtbtn\" style=\"float:right;margin-right: 4px;\">\n                                <button id=\"clear\" class=\"e-small\">Clear</button>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            </div>\n        </div>\n    </div>\n</div>","app.component.css":".e-pivotview {\n    width: 100%;\n    height:100%;\n}\n.pivottable-property-section table tr td:first-child {\n    width: 25%;\n}\n.pivottable-property-section .text1cls,\n.pivottable-property-section .text2cls {\n    font-weight: bold;\n    margin-top: 20px;\n}\n.pivottable-property-section {\n    overflow: auto;\n}\n\n#EventLog b {\n    color: #388e3c;\n}\n\n.pivottable-property-section hr {\n    margin: 1px 10px 10px 0px;\n    border-top: 1px solid #eee;\n}\n\n#EventLog hr {\n    margin-bottom: 1px;\n}\n\n.e-custom-class {\n    text-decoration: underline;\n}\n\n.e-custom-class:hover {\n    color: red;\n    text-decoration: none;\n}"}