{"common/shared.module":"import { NgModule } from '@angular/core';\nimport { ButtonModule } from '@syncfusion/ej2-ng-buttons';\nimport { ListViewModule } from '@syncfusion/ej2-ng-lists';\nimport { DropDownListModule } from '@syncfusion/ej2-ng-dropdowns';\n\n\n@NgModule({\n    imports: [\n        ButtonModule,\n        ListViewModule,\n        DropDownListModule\n    ],\n     \n    exports: [\n        ButtonModule,\n        ListViewModule,\n        DropDownListModule\n    ]\n})\nexport class SharedModule { }\n","app.module":"import { FilteringDropDownListComponent } from './filtering.component';\n\n\n\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\nimport { NgModule, ModuleWithProviders, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n\n\n\n\n\n\n\nimport { SharedModule } from './common/shared.module';\n\n\n\n\n\n@NgModule({\n    imports: [SharedModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [FilteringDropDownListComponent],\nbootstrap: [FilteringDropDownListComponent]\n})\nexport class AppModule { }","filtering.component":"import { Component, ViewEncapsulation } from '@angular/core';\nimport { Query, DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';\nimport { Browser, EmitType } from '@syncfusion/ej2-base';\nimport { FilteringEventArgs } from '@syncfusion/ej2-dropdowns';\n\n@Component({\n    selector: 'control-content',\n    templateUrl: 'filtering.html',\n    styleUrls: ['filtering.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FilteringDropDownListComponent {\n    public data: DataManager = new DataManager({\n        url: 'http://services.odata.org/V4/Northwind/Northwind.svc/Customers',\n        adaptor: new ODataV4Adaptor,\n        crossDomain: true\n    });\n    public query: Query = new Query().select(['ContactName', 'CustomerID']).take(25);\n    public fields: Object = { text: 'ContactName', value: 'CustomerID' };\n    public height: string = '220px';\n    public watermark: string = 'Select a customer';\n    public filterPlaceholder: string = 'Search';\n    public targetElement: HTMLElement;\n    public popupElement: HTMLElement;\n    public spinnerElement: HTMLElement;\n    public onFiltering: EmitType<FilteringEventArgs> = this.debounce(\n        (e: FilteringEventArgs) => {\n            let query: Query = new Query().select(['ContactName', 'CustomerID']);\n            query = (e.text !== '') ? query.where('ContactName', 'startswith', e.text, true) : query;\n            e.updateData(this.data, query);\n        },\n        200);\n\n    public onActionBegin(): void {\n        this.popupElement = <HTMLElement><HTMLElement>document.getElementById('dropdownlist-searching_popup');\n        if (Browser.isDevice && this.popupElement) {\n            if (!this.spinnerElement) {\n                this.spinnerElement = <HTMLElement>document.createElement('span');\n                this.spinnerElement.classList.add('e-spinner-icon');\n                this.popupElement.appendChild(this.spinnerElement);\n            }\n        } else {\n            let element: HTMLElement = <HTMLElement>document.querySelector('.control-section').querySelector('.e-input-group-icon');\n            this.targetElement = this.popupElement ? <HTMLElement>this.popupElement.querySelector('.e-clear-icon') : element;\n            if (this.targetElement) {\n                this.targetElement.classList.add('e-spinner-icon');\n                if (!this.popupElement) {\n                    this.targetElement.classList.remove('e-ddl-icon', 'e-search-icon');\n                }\n            }\n        }\n    }\n    public debounce(func: Function, wait?: number): EmitType<FilteringEventArgs> {\n        let timeout: number;\n        let isTypedFirst: boolean = false;\n        /* tslint:disable */\n        return function () {\n            /* tslint:enable */\n            let context: object = this, args: IArguments = arguments;\n            let later: Function = () => {\n                timeout = null;\n                if (!isTypedFirst) { func.apply(context, args); }\n            };\n            let callNow: boolean = !isTypedFirst && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) {\n                isTypedFirst = true;\n                func.apply(context, args);\n            } else {\n                isTypedFirst = false;\n            }\n        };\n    };\n    public onActionComplete(): void {\n        if (Browser.isDevice && this.popupElement && this.spinnerElement) {\n            this.spinnerElement.remove();\n            this.spinnerElement = null;\n        } else if (this.targetElement) {\n            this.targetElement.classList.remove('e-spinner-icon');\n            if (!this.popupElement) {\n                this.targetElement.classList.add('e-ddl-icon', 'e-search-icon');\n            }\n        }\n        if (!this.targetElement) {\n            let element: Element = document.getElementsByClassName('e-spinner-icon')[0];\n            if (element) {\n                element.classList.remove('e-spinner-icon');\n            }\n        }\n    }\n    public onActionFailure(): void {\n        this.onActionComplete();\n    }\n}","filtering.html":"<div class=\"control-section\">\n    <div class='content' style=\"width: 280px;margin: 0 auto; padding-top:40px\">\n        <ej-dropdownlist id='dropdownlist-searching' [dataSource]='data' (actionFailure)='onActionFailure()' (actionComplete)='onActionComplete()' (actionBegin)='onActionBegin()' [fields]='fields' (filtering)='onFiltering($event)' [filterBarPlaceholder]=\"filterPlaceholder\"\n            [popupHeight]='height' [allowFiltering]='true' [placeholder]='watermark'></ej-dropdownlist>\n    </div>\n</div>\n","filtering.css":".e-input-group .e-spinner-icon {\n    background-image: url(./styles/images/Medium-36px-spin.gif) !important;\n    background-size: 14px 14px !important;\n    background-repeat: no-repeat !important;\n    background-position: center center !important;\n}\n\n.e-input-group .e-spinner-icon::before {\n    content: '';\n}\n\n.e-popup .e-input-group .e-spinner-icon {\n    padding: 12px 12px;\n}\n\n.e-bigger .e-ddl-device .e-spinner-icon {\n    background-image: url(./styles/images/Medium-36px-spin.gif) !important;\n    background-repeat: no-repeat !important;\n    background-position: center center !important;\n    background-size: 30px 30px !important;\n    width: 30px;\n    height: 30px;\n    margin: 0 auto;\n    position: absolute;\n    top: 25%;\n    left: 0px;\n    bottom: 0px;\n    right: 0px;\n}\n.e-bigger .e-popup .e-input-group .e-spinner-icon {\n    padding: 15px 15px 14px;\n}\n","index.html":"<!DOCTYPE html>\n<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n\n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\nimport { enableRipple } from '@syncfusion/ej2-base';\n\nenableRipple(true);\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}