{"app.module":"import { TooltipComponent } from './tooltip.component';\n\n\n\n\n\n\n\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\n/**\n * Lineargauge Control\n */\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\n\nimport { LinearGaugeAllModule } from '@syncfusion/ej2-ng-lineargauge';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@NgModule({\n    imports: [LinearGaugeAllModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [TooltipComponent],\nbootstrap: [TooltipComponent]\n})\nexport class AppModule { }","tooltip.component":"import { Component, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { LinearGaugeComponent } from '@syncfusion/ej2-ng-lineargauge';\nimport { ITooltipRenderEventArgs, IAxisLabelRenderEventArgs, ILoadedEventArgs, ILoadEventArgs, IResizeEventArgs } from '@syncfusion/ej2-lineargauge';\n\n/**\n * Tooltip linear gauge\n */\n@Component({\n    selector: 'control-content',\n    templateUrl: 'tooltip.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TooltipComponent {\n    @ViewChild('gauge')\n    public gauge: LinearGaugeComponent;\n    //Initializing Annotation\n    public Annotation: Object[] = [\n        {\n            content: '<div id=\"first\"><h1 style=\"font-size:15px\">Inches</h1></div>',\n            axisIndex: 0,\n            axisValue: 5.4,\n            x: 35,\n            y: -58,\n            zIndex: '1'\n        },\n        {\n            content: '<div id=\"second\"><h1 style=\"font-size:15px\">Centimeters</h1></div>',\n            axisIndex: 1,\n            axisValue: 16.5,\n            x: 50,\n            y: 52,\n            zIndex: '1'\n        }\n    ];\n    public Container: Object = {\n        width: 140,\n        border: {\n            width: 2,\n            color: '#a6a6a6'\n        }\n    };\n    public Tooltip: Object = {\n        enable: true,\n        fill: '#fffff',\n        textStyle: {\n            color: '#fffff'\n        }\n    };\n\n    public Axes: Object = [\n        {\n            minimum: 0,\n            maximum: 10,\n            line: {\n                offset: 140\n            },\n            majorTicks: {\n                interval: 1\n            },\n            minorTicks: {\n                interval: 0.2\n            },\n            labelStyle: {\n                font: {\n                    color: '#000000'\n                }\n            },\n            pointers: [{\n                type: 'Bar',\n                value: 5.4,\n                offset: 15,\n                color: '#ff66b3'\n            }],\n        },\n        {\n            opposedPosition: true,\n            minimum: 0,\n            maximum: 25,\n            line: {\n                offset: -140,\n            },\n            labelStyle: {\n                font: {\n                    color: '#000000'\n                }\n            },\n            majorTicks: {\n                interval: 1\n            },\n            minorTicks: {\n                interval: 0.2\n            },\n            pointers: [{\n                type: 'Bar',\n                offset: -15,\n                value: 16.5,\n                color: '#4d94ff'\n            }]\n        }\n    ];\n\n    ;\n    public labelRender(args: IAxisLabelRenderEventArgs): void {\n        if (args.axis.visibleRange.min === args.value || args.axis.visibleRange.max === args.value) {\n            args.text = '';\n        }\n    }\n    public renderTooltip(args: ITooltipRenderEventArgs): void {\n        args.content = (args.axis.visibleRange.max === 25) ? Number(args.content).toFixed(1) + ' cm' : Number(args.content).toFixed(1) + ' in';\n    }\n\n    public gaugeLoaded(args: ILoadedEventArgs): void {\n        if (document.getElementById('tooltipContainer')) {\n            if (args.gauge.availableSize.width < 500) {\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = 'rotate(270deg)';\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = 'rotate(270deg)';\n            } else {\n                document.getElementById('tooltipContainer_Annotation_0').style.transform = '';\n                document.getElementById('tooltipContainer_Annotation_1').style.transform = '';\n            }\n        }\n    }\n\n    public gaugeLoad(args: ILoadEventArgs): void {\n        let width: number = Number(this.gauge.element.offsetWidth);\n        if (width < 500) {\n            this.gauge.axes[1].majorTicks.interval = 2;\n            this.gauge.axes[1].minorTicks.interval = 1;\n            this.gauge.orientation = 'Vertical';\n            this.gauge.annotations[0].x = -57;\n            this.gauge.annotations[0].y = -30;\n            this.gauge.annotations[1].x = 50;\n            this.gauge.annotations[1].y = -45;\n        } else {\n            this.gauge.axes[1].majorTicks.interval = 1;\n            this.gauge.axes[1].minorTicks.interval = 0.5;\n            this.gauge.orientation = 'Horizontal';\n            this.gauge.annotations[0].x = 35;\n            this.gauge.annotations[0].y = -58;\n            this.gauge.annotations[1].x = 50;\n            this.gauge.annotations[1].y = 52;\n        }\n    }\n\n    public gaugeResized(args: IResizeEventArgs) {\n        if (args.currentSize.width < 500) {\n            this.gauge.axes[1].majorTicks.interval = 2;\n            this.gauge.axes[1].minorTicks.interval = 1;\n            this.gauge.orientation = 'Vertical';\n            this.gauge.annotations[0].x = -57;\n            this.gauge.annotations[0].y = -30;\n            this.gauge.annotations[1].x = 50;\n            this.gauge.annotations[1].y = -45;\n        } else {\n            this.gauge.axes[1].majorTicks.interval = 1;\n            this.gauge.axes[1].minorTicks.interval = 0.5;\n            this.gauge.orientation = 'Horizontal';\n            this.gauge.annotations[0].x = 35;\n            this.gauge.annotations[0].y = -58;\n            this.gauge.annotations[1].x = 50;\n            this.gauge.annotations[1].y = 52;\n        }\n    }\n}","tooltip.html":"<div id=\"action-description\">\n    <p>\n        This sample demonstrates rendering tooltip in linear gauge. To see tooltip in action , hover pointer or tap on pointer.\n    </p>\n</div>\n<div class=\"control-section\">\n    <ej-lineargauge id='tooltipContainer' #gauge style='display:block;' (load)='gaugeLoad($event)' (resized)='gaugeResized($event)'\n        (loaded)='gaugeLoaded($event)' (axisLabelRender)='labelRender($event)' (tooltipRender)='renderTooltip($event)' orientation='Horizontal'\n        [container]='Container' [tooltip]='Tooltip' [annotations]='Annotation' [axes]='Axes'>\n    </ej-lineargauge>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","index.html":"<!DOCTYPE html>\n<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\n        \n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\nimport { enableRipple } from '@syncfusion/ej2-base';\n\nenableRipple(true);\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}