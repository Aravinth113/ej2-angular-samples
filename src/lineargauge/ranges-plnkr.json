{"app.module":"import { RangesComponent } from './ranges.component';\n\n\n\n\n\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\n/**\n * Lineargauge Control\n */\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\n\nimport { LinearGaugeAllModule } from '@syncfusion/ej2-ng-lineargauge';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@NgModule({\n    imports: [LinearGaugeAllModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [RangesComponent],\nbootstrap: [RangesComponent]\n})\nexport class AppModule { }","ranges.component":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LinearGaugeComponent } from '@syncfusion/ej2-ng-lineargauge';\nimport { Position } from '@syncfusion/ej2-lineargauge';\n\n/**\n * Default linear gauge\n */\n@Component({\n    selector: 'control-content',\n    templateUrl: 'ranges.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class RangesComponent {\n    @ViewChild('gauge')\n    public gauge: LinearGaugeComponent;\n    public rangePalette: Object[] = ['#9ef47a', '#f4f47a', '#ed5e5e'];\n    public Axes: Object[] = [{\n        labelStyle: {\n            format: '{value}%',\n            font: {\n                color: '#424242'\n            },\n            offset: 30\n        },\n        line: {\n            width: 0\n        },\n        pointers: [\n            {\n                value: 35,\n                height: 10,\n                width: 10,\n                markerType: 'Triangle',\n                placement: 'Near',\n                offset: -40,\n                color: '#757575'\n            }\n        ],\n        majorTicks: {\n            height: 0\n        },\n        minorTicks: {\n            height: 0\n        },\n        ranges: [{\n            start: 0,\n            end: 32,\n            color: '#30B32D',\n            startWidth: 15,\n            endWidth: 15\n        },\n        {\n            start: 32,\n            end: 68,\n            startWidth: 15,\n            endWidth: 15,\n            color: '#FFDF00'\n        },\n        {\n            start: 68,\n            end: 100,\n            startWidth: 15,\n            endWidth: 15,\n            color: '#F03E3E'\n        }]\n    }];\n    public Annotation: Object[] = [{\n        content: '<div id=\"pointer\" style=\"width:20px\"><h1 style=\"font-size:18px;color:#424242\">35</h1></div>',\n        axisIndex: 0,\n        axisValue: 35,\n        y: -50\n    }];\n    ;\n\n    ngAfterViewInit(): void {\n        document.getElementById('rangeIndex').onchange = (): void => {\n            let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n            let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n            let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n            let rangeColor: HTMLSelectElement = <HTMLSelectElement>document.getElementById('color');\n            let startWidth: HTMLInputElement = <HTMLInputElement>document.getElementById('startWidth');\n            let endWidth: HTMLInputElement = <HTMLInputElement>document.getElementById('endWidth');\n            start.value = this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].start.toString();\n            end.value = this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].end.toString();\n            startWidth.value = this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].startWidth.toString();\n            endWidth.value = this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].endWidth.toString();\n            rangeColor.value = this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].color.toString();\n            document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + startWidth.value;\n            document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + endWidth.value;\n            document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;\n            document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;\n            this.gauge.refresh();\n        };\n\n        document.getElementById('color').onchange = () => {\n            let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n            let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('color');\n            this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].color = ele.value;\n            this.gauge.refresh();\n        };\n\n        document.getElementById('startWidth').ontouchmove = document.getElementById('startWidth').onpointermove =\n            document.getElementById('startWidth').onchange = (): void => {\n                let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('startWidth');\n                let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].startWidth = parseInt(ele.value, 10);\n                document.getElementById('startWidthValue').innerHTML = 'Range Start Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;\n                this.gauge.refresh();\n            };\n\n        document.getElementById('endWidth').ontouchmove = document.getElementById('endWidth').onpointermove =\n            document.getElementById('endWidth').onchange = (): void => {\n                let ele: HTMLInputElement = <HTMLInputElement>document.getElementById('endWidth');\n                let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].endWidth = parseInt(ele.value, 10);\n                document.getElementById('endWidthValue').innerHTML = 'Range End Width<span>&nbsp;&nbsp;&nbsp;' + ele.value;\n                this.gauge.refresh();\n            };\n\n        document.getElementById('start').ontouchmove = document.getElementById('start').onpointermove =\n            document.getElementById('start').onchange = (): void => {\n                let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n                let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n                let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].start = parseInt(start.value, 10);\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].end = parseInt(end.value, 10);\n                document.getElementById('startRangeValue').innerHTML = 'Range Start <span>&nbsp;&nbsp;&nbsp;' + start.value;\n                this.gauge.refresh();\n            };\n\n        document.getElementById('end').ontouchmove = document.getElementById('end').onpointermove =\n            document.getElementById('end').onchange = (): void => {\n                let start: HTMLInputElement = <HTMLInputElement>document.getElementById('start');\n                let end: HTMLInputElement = <HTMLInputElement>document.getElementById('end');\n                let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].start = parseInt(start.value, 10);\n                this.gauge.axes[0].ranges[parseInt(rangeIndex.value, 10)].end = parseInt(end.value, 10);\n                document.getElementById('endRangeValue').innerHTML = 'Range End <span>&nbsp;&nbsp;&nbsp;' + end.value;\n                this.gauge.refresh();\n            };\n\n        document.getElementById('useRangeColor').onchange = (): void => {\n            let rangeIndex: HTMLSelectElement = <HTMLSelectElement>document.getElementById('rangeIndex');\n            let range: HTMLSelectElement = <HTMLSelectElement>document.getElementById('useRangeColor');\n            this.gauge.axes[0].labelStyle.useRangeColor = (range.value === 'range') ? true : false;\n            this.gauge.refresh();\n        };\n    }\n}","ranges.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ej-lineargauge id='rangeContainer' #gauge style='display:block;' orientation='Horizontal' [axes]='Axes' [annotations]='Annotation'>\n        </ej-lineargauge>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr>\n                        <td>\n                            <div> Range Index </div>\n                        </td>\n                        <td>\n                            <div>\n                                <select name=\"selectIndex\" autocomplete=\"off\" id=\"rangeIndex\" class=\"form-control\" style=\"width:90%\">\n                        <option value=\"0\" selected>Low</option>\n                        <option value=\"1\">Moderate</option>\n                        <option value=\"2\">High</option>\n                     </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div>Range Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"text\" value=\"#F03E3E\" id='color' class=\"form-control\" style=\"width:90%\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div>Range Font Color</div>\n                        </td>\n                        <td>\n                            <div>\n                                <select name=\"selectIndex\" autocomplete=\"off\" id=\"useRangeColor\" class=\"form-control\" style=\"width:90%\">\n                                            <option value=\"font\" selected>Default Color</option>\n                                        <option value=\"range\">Range Color</option>\n                                     </select>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div id='startRangeValue'>Range Start <span>&nbsp;&nbsp;&nbsp;0</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"start\" value=\"0\" min=\"0\" max=\"100\" style=\"width:90%;height:34px;\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div id='endRangeValue'>Range End <span>&nbsp;&nbsp;&nbsp;32</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"end\" value=\"32\" min=\"0\" max=\"100\" style=\"width:90%;height:34px;\" />\n                            </div>\n                        </td>\n                    </tr>\n\n                    <tr>\n                        <td>\n                            <div id='startWidthValue'>Range Start Width <span>&nbsp;&nbsp;&nbsp;15</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"startWidth\" value=\"15\" min=\"0\" max=\"30\" style=\"width:90%;height:34px;\" />\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div id='endWidthValue'>Range End Width <span>&nbsp;&nbsp;&nbsp;15</span> </div>\n                        </td>\n                        <td>\n                            <div>\n                                <input type=\"range\" id=\"endWidth\" value=\"15\" min=\"0\" max=\"30\" style=\"width:90%;height:34px;\" />\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n\n    .property-panel-section {\n        height: 350px;\n    }\n</style>","index.html":"<!DOCTYPE html>\n<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\n        \n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\nimport { enableRipple } from '@syncfusion/ej2-base';\n\nenableRipple(true);\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}