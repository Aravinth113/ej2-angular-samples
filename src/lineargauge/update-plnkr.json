{"app.module":"import { UpdateComponent } from './update.component';\n\n\n\n\n\n\n\n\nimport { HttpModule, JsonpModule } from '@angular/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport 'rxjs/add/operator/map';\n/**\n * Lineargauge Control\n */\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\n\nimport { LinearGaugeAllModule } from '@syncfusion/ej2-ng-lineargauge';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@NgModule({\n    imports: [LinearGaugeAllModule, HttpModule, JsonpModule, BrowserModule],\ndeclarations: [UpdateComponent],\nbootstrap: [UpdateComponent]\n})\nexport class AppModule { }","update.component":"import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { LinearGaugeComponent } from '@syncfusion/ej2-ng-lineargauge';\nimport { ILoadedEventArgs } from '@syncfusion/ej2-lineargauge';\n/**\n * Tooltip linear gauge\n */\n@Component({\n    selector: 'control-content',\n    templateUrl: 'update.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class UpdateComponent {\n    @ViewChild('updateGauge')\n    public updateGauge: LinearGaugeComponent;\n    public toolTipInterval: number;\n    private element: HTMLElement = document.getElementById('updateGauge');\n    public Container: Object = {\n        height: 350,\n        width: 20,\n        offset: -85,\n        backgroundColor: '#d6d1d1'\n    };\n    public Annotation: Object[] = [\n        {\n            content: '<div id=\"systolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Systolic:-</h1></div>',\n            horizontalAlignment: 'Center',\n            verticalAlignment: 'Center',\n            x: 190,\n            y: -40,\n        },\n        {\n            content: '<div id=\"diastolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Diastolic:-</h1></div>',\n            horizontalAlignment: 'Center',\n            verticalAlignment: 'Center',\n            x: 190\n        },\n        {\n            content: '<div id=\"pulse\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Pulse:-</h1></div>',\n            horizontalAlignment: 'Center',\n            verticalAlignment: 'Center',\n            x: 190,\n            y: 40\n        },\n        {\n            content: '<div id=\"pressure\" style=\"width:300px;color:#808080\"><h1 style=\"font-size:14px;font-weight:Bold;\">Blood Pressure Measure</h1></div>',\n            horizontalAlignment: 'Center',\n            verticalAlignment: 'Center',\n            x: 203,\n            y: -80\n        },\n        {\n            content: '<div id=\"frame1\"><img style=\"height:25px;width:25px;\"'\n            + 'src=\"src/lineargauge/images/diastolic.jpg\" /></div>',\n            verticalAlignment: 'Center',\n            horizontalAlignment: 'Center',\n            x: 60,\n            y: -33,\n        },\n        {\n            content: '<div id=\"frame2\"><img style=\"height:25px;width:25px;\"'\n            + 'src=\"src/lineargauge/images/systolic.jpg\" /></div>',\n            verticalAlignment: 'Center',\n            horizontalAlignment: 'Center',\n            x: 60,\n            y: 5\n        },\n        {\n            content: '<div id=\"frame3\"><img style=\"height:25px;width:25px;\"'\n            + 'src=\"src/lineargauge/images/Heart-ECG.png\" /></div>',\n            verticalAlignment: 'Center',\n            horizontalAlignment: 'Center',\n            x: 60,\n            y: 45\n        },\n        {\n            content: '<div id=\"frame\"><img style=\"height:410px;width:200px;opacity:0.5;\"'\n            + 'src=\"src/lineargauge/images/thermo-light_03.png\" /></div>',\n            verticalAlignment: 'Center',\n            horizontalAlignment: 'Center',\n            x: -95\n        },\n        {\n            content: '<div id=\"border\"><div style=\"border:1px solid;width:210px;height:170px\"></div></div>',\n            verticalAlignment: 'Near',\n            horizontalAlignment: 'Center',\n            x: 130,\n            y: 130\n        }\n    ];\n    public Major1: Object = {\n        interval: 20\n    };\n    public Minor1: Object = {\n        interval: 4\n    };\n    public Label1: Object = {\n        font: {\n            color: '#000000'\n        }\n    };\n    public Pointer1: Object[] = [\n        {\n            value: 0,\n            type: 'Bar',\n            width: 20,\n            color: '#ff1919'\n        }\n    ];\n    public Line2: Object = {\n        height: 320\n    };\n    public Major2: Object = {\n        interval: 20\n    };\n    public Minor2: Object = {\n        interval: 4\n    };\n    public Label2: Object = {\n        font: {\n            color: '#000000'\n        }\n    };\n    public Pointer2: Object[] = [\n        {\n            width: 0\n        }\n    ];\n    public value: number;\n    public frame1Display: string;\n    public frame2Display: string;\n    public frame3Display: string;\n    public frame4Display: string;\n    ;\n\n    ngAfterViewInit(): void {\n        document.getElementById('check').onclick = () => {\n            let check: HTMLButtonElement = <HTMLButtonElement>document.getElementById('check');\n            let reset: HTMLButtonElement = <HTMLButtonElement>document.getElementById('reset');\n            check.disabled = true;\n            reset.disabled = true;\n            this.pressureStart(reset);\n        };\n        document.getElementById('reset').onclick = () => {\n            let check: HTMLButtonElement = <HTMLButtonElement>document.getElementById('check');\n            let reset: HTMLButtonElement = <HTMLButtonElement>document.getElementById('reset');\n            reset.disabled = true;\n            check.disabled = true;\n            this.pressureEnd(check);\n        };\n    }\n\n    private getRandom(min: number, max: number): number {\n        return Math.round(Math.random() * (max - min) + min);\n    }\n\n    public pressureStart(element: HTMLButtonElement): void {\n        let colors: string[] = ['#66ff66', '#ffff00', '#ff0000'];\n        let target: number = Math.round(this.getRandom(100, 140));\n        let addition: number = (target + 80);\n        let pressure: number = 0;\n        let toolTipInterval: number;\n        let increase: boolean = true;\n        let measureValues: number[] = [40, 80];\n        let wait: boolean = false;\n        let speed: number = 0.1; let setAnnotation: boolean = false;\n        let startTime: number = 0; let drawn: boolean = true;\n        let timeStamp: number; let process: boolean = true;\n        this.toolTipInterval = setInterval(\n            (): void => {\n                if (document.getElementById('updateGauge')) {\n                    pressure = increase ? (pressure + 0.2) : (pressure - 0.2);\n                    if (!wait && increase && pressure > 0 && pressure < target) {\n                        measureValues.map((val: number) => {\n                            timeStamp = 50;\n                            if (val === Math.round(pressure)) {\n                                wait = true;\n                                startTime = 0;\n                            }\n                        });\n                    } else if (Math.round(pressure) === addition) {\n                        increase = false;\n                    } else if (!increase && Math.round(pressure) === target) {\n                        this.value = pressure;\n                        setAnnotation = true;\n                        element.disabled = false;\n                        clearInterval(this.toolTipInterval);\n                    }\n                    if (wait) {\n                        startTime += 1;\n                        if (startTime > timeStamp) {\n                            process = true;\n                        } else {\n                            process = false;\n                        }\n                    }\n                    if (process) {\n                        wait = false;\n                        startTime = 0;\n                        process = true;\n                        this.updateGauge.setPointerValue(0, 0, pressure);\n                    }\n                    if (setAnnotation) {\n                        let systolicValue: number = Math.round(pressure);\n                        let diastolicValue: number = Math.round((pressure - 40));\n                        let pulse: number = Math.round(this.getRandom(65, 80));\n                        let content1: string = '<div id=\"systolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Systolic: '\n                            + systolicValue + ' mmHg</h1></div>';\n                        let content2: string = '<div id=\"diastolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">' +\n                            'Diastolic: ' + diastolicValue + ' mmHg</h1></div>';\n                        let content3: string = '<div id=\"pulse\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Pulse: '\n                            + pulse + '</h1></div>';\n                        let first: string = '<div id=\"pressure\" style=\"width:300px;color:#808080\">';\n                        let second: string = '<h1 style=\"font-size:14px;font-weight:Bold;\">Blood Pressure Measure</h1></div>';\n                        let content4: string = first + second;\n                        this.updateGauge.setAnnotationValue(0, content1);\n                        this.updateGauge.setAnnotationValue(1, content2);\n                        this.updateGauge.setAnnotationValue(2, content3);\n                    }\n                } else {\n                    clearInterval(toolTipInterval);\n                }\n            },\n            speed);\n    }\n\n\n\n    public pressureEnd(element: HTMLButtonElement): void {\n        let target: number = 120;\n        let pressure: number = 0;\n        let toolTipInterval: number;\n        let speed: number = 0.1;\n        pressure = this.value;\n        this.toolTipInterval = setInterval(\n            (): void => {\n                if (document.getElementById('updateGauge')) {\n                    pressure = (pressure - 0.4);\n                    this.updateGauge.setPointerValue(0, 0, pressure);\n                    let content1: string = '<div id=\"systolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Systolic:-</h1></div>';\n                    let content2: string = '<div id=\"diastolic\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Diastolic:-</h1></div>';\n                    let content3: string = '<div id=\"pulse\" style=\"width:200px;color:#808080\"><h1 style=\"font-size:13px\">Pulse:-</h1></div>';\n                    let first: string = '<div id=\"pressure\" style=\"width:300px;color:#808080\">';\n                    let second: string = '<h1 style=\"font-size:14px;font-weight:Bold;\"></h1></div>';\n                    let content4: string = first + second;\n                    this.updateGauge.setAnnotationValue(0, content1);\n                    this.updateGauge.setAnnotationValue(1, content2);\n                    this.updateGauge.setAnnotationValue(2, content3);\n                    if (Math.round(pressure) === 0) {\n                        element.disabled = false;\n                        clearInterval(toolTipInterval);\n                    }\n                } else {\n                    clearInterval(toolTipInterval);\n                }\n            },\n            speed);\n    }\n}","update.html":"<div class=\"control-section\">\n    <div class=\"col-md-8\">\n        <ej-lineargauge id='updateGauge' #updateGauge style='display:block;' [container]='Container' [annotations]='Annotation'>\n            <e-axes>\n                <e-axis minimum=0 maximum=300 [majorTicks]='Major1' [minorTicks]='Minor1' [labelStyle]='Label1' [pointers]='Pointer1'>\n                </e-axis>\n                <e-axis minimum=10 maximum=290 [line]='Line2' [majorTicks]='Major2' [minorTicks]='Minor2' [labelStyle]='Label2' [pointers]='Pointer2'\n                    opposedPosition=true>\n                </e-axis>\n            </e-axes>\n        </ej-lineargauge>\n    </div>\n    <div class=\"col-md-4 property-section\">\n        <div class=\"property-panel-section\">\n            <div class=\"property-panel-header\">Properties</div>\n            <div class=\"property-panel-content\">\n                <table id=\"property\" class=\"property-panel-table\" title=\"Properties\" style=\"width: 100%\">\n                    <tr>\n                        <td>\n                            <div>\n                                <input type=\"button\" id=\"check\" value='Check' class=\"form-control\" style=\"width:50%;margin-left:50px;\">\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <div>\n                                <input type=\"button\" id=\"reset\" disabled value='Reset' class=\"form-control\" style=\"width:50%;margin-left:50px;\">\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n<style>\n    .control-section {\n        min-height: 450px;\n    }\n</style>","index.html":"<html>\n    \n    <head>\n        <meta name=\"author\" content=\"Syncfusion\" />\n        <link href=\"http://npmci.syncfusion.com/packages/production/material.css\" rel=\"stylesheet\" />\n        <script src=\"https://unpkg.com/core-js/client/shim.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.min.js\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/zone.js/0.6.25/zone.min.js\"></script>\n        <script src=\"https://unpkg.com/reflect-metadata@0.1.3\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\n        <script src=\"systemjs.config.js\"></script>\n    </head>\n    \n    <body>\n        <control-content>\n            <div id='loader'>Loading...</div>\n        </control-content>\n    </body>\n    \n    </html>\n    ","systemjs.config.js":"System.config({\n    transpiler: \"typescript\",\n    typescriptOptions: {\n        compilerOptions: {\n            target: \"umd\",\n            module: \"commonjs\",\n            moduleResolution: \"node\",\n            emitDecoratorMetadata: true,\n            experimentalDecorators: true\n        }\n    },\n    paths: {\n        \"syncfusion:\": \"http://npmci.syncfusion.com/packages/production/\",\n        \"angular:\": \"https://unpkg.com/@angular/\"\n    },\n    map: {\n        main: 'main.ts',\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\n\n        \"@syncfusion/ej2-ng-base\": \"syncfusion:ej2-ng-base/dist/ej2-ng-base.umd.min.js\",\n        \"@syncfusion/ej2-ng-buttons\": \"syncfusion:ej2-ng-buttons/dist/ej2-ng-buttons.umd.min.js\",\n        \"@syncfusion/ej2-ng-calendars\": \"syncfusion:ej2-ng-calendars/dist/ej2-ng-calendars.umd.min.js\",\n        \"@syncfusion/ej2-ng-charts\": \"syncfusion:ej2-ng-charts/dist/ej2-ng-charts.umd.min.js\",\n        \"@syncfusion/ej2-ng-circulargauge\": \"syncfusion:ej2-ng-circulargauge/dist/ej2-ng-circulargauge.umd.min.js\",\n        \"@syncfusion/ej2-ng-data\": \"syncfusion:ej2-ng-data/dist/ej2-ng-data.umd.min.js\",\n        \"@syncfusion/ej2-ng-dropdowns\": \"syncfusion:ej2-ng-dropdowns/dist/ej2-ng-dropdowns.umd.min.js\",\n        \"@syncfusion/ej2-ng-grids\": \"syncfusion:ej2-ng-grids/dist/ej2-ng-grids.umd.min.js\",\n        \"@syncfusion/ej2-ng-inputs\": \"syncfusion:ej2-ng-inputs/dist/ej2-ng-inputs.umd.min.js\",\n        \"@syncfusion/ej2-ng-lists\": \"syncfusion:ej2-ng-lists/dist/ej2-ng-lists.umd.min.js\",\n        \"@syncfusion/ej2-ng-navigations\": \"syncfusion:ej2-ng-navigations/dist/ej2-ng-navigations.umd.min.js\",\n        \"@syncfusion/ej2-ng-popups\": \"syncfusion:ej2-ng-popups/dist/ej2-ng-popups.umd.min.js\",\n        \"@syncfusion/ej2-ng-lineargauge\": \"syncfusion:ej2-ng-lineargauge/dist/ej2-ng-lineargauge.umd.min.js\",\n\n        '@angular/core': 'angular:core/bundles/core.umd.js',\n        '@angular/common': 'angular:common/bundles/common.umd.js',\n        '@angular/compiler': 'angular:compiler/bundles/compiler.umd.js',\n        '@angular/http': 'angular:http/bundles/http.umd.js',\n        '@angular/forms': 'angular:forms/bundles/forms.umd.js',\n        '@angular/router': 'angular:router/bundles/router.umd.js',\n        '@angular/platform-browser': 'angular:platform-browser/bundles/platform-browser.umd.js',\n        '@angular/platform-browser-dynamic': 'angular:platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n        '@angular/material': 'angular:material/bundles/material.umd.js',\n        'rxjs': 'https://unpkg.com/rxjs'\n    },\n     meta: { \n       '*.json': { loader: 'plugin-json' }\n    }\n});\n\nSystem.import('main.ts').catch(console.error.bind(console));\n","main.ts":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app.module';\nimport { enableRipple } from '@syncfusion/ej2-base';\n\nenableRipple(true);\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);"}